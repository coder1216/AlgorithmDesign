package HeMaSeaFood;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IotFoodFridge implements ISeaFoodService{
    //Id of the fridge
    private final String fridgeId;

    //The address of this fridge
    private final String address;

    //The service that used to fetch and update order data
    private final ISeaFoodService seaFoodService;

    //List of cells
    private final List<Cell> cells;

    /*
     * The Map of cell.
     * Key: the code generated by service
     * Value: the Cell in this fridge
     *
     * Improve ? Cell --> List<Cell>
     */
    private final Map<String, Cell> cellPasswordMap;

    /*
     * Constructor
     *
     * @param fridgeId          The id of the fridge
     * @param address           The physical address of the fridge
     * @param seaFoodService    The service that used to fetch/update order
     */
    public IotFoodFridge(@NotNull final String fridgeId,
                         @NotNull final String address,
                         @NotNull final ISeaFoodService seaFoodService){
        this.fridgeId = fridgeId;
        this.address = address;
        this.seaFoodService = seaFoodService;

        cells = new ArrayList<Cell>();
        cellPasswordMap = new HashMap<String, Cell>();
    }

    @NotNull
    public String getFridgeId(){
        return fridgeId;
    }

    @NotNull
    public String getAddress(){
        return address;
    }

    @NotNull
    public List<Cell> getCells(){
        return cells;
    }

    @NotNull
    public Cell getCell(final int index){
        if(index < 0 || index >= cells.size()) {
            return null;
        }

        return cells.get(index);
    }

    public void addCell(@NotNull Cell cell){
        cells.add(cell);
    }

    /*
     * The method for user to take the item from the cell.
     * @param code   The code that generated by the service
     */
    @Nullable
    public SeaFoodItem takeItem(@NotNull final String code){
        if(!cellPasswordMap.containsKey(code)) {
            return null;
        }

        final Cell cell = cellPasswordMap.remove(code);

        return cell.getItem();
    }


    public boolean putItem(@NotNull final String orderId, @NotNull final SeaFoodItem seaFoodItem, @NotNull final Cell cell ){
        if(!cell.isEmpty()) {
            return false;
        }

        if(cell.getSize() < seaFoodItem.getSize()) {
            return false;
        }

        cell.setItem(seaFoodItem);

        //Use the service to generate the pass code which can be used to open the cell
        final String passCode = seaFoodService.generateCode(seaFoodItem.getItemId());

        //Update the cell
        cellPasswordMap.put(passCode,cell);

        //Update the order
        updateOrder(orderId,seaFoodItem,passCode);

        return true;
    }

    private void updateOrder(@NotNull final String orderId, @NotNull final SeaFoodItem seaFoodItem, String passCode) {
        final Order order = seaFoodService.getSeaFoodOrder(orderId);
        final int orderSize = order.getSeaFoodItems().size();
        final List<SeaFoodItem> deliveredItems = order.getDeliveredItems();

        deliveredItems.add(seaFoodItem);

        seaFoodService.updateOrder(order,passCode);

        //If all the items are delivered, service should notice client
        if(deliveredItems.size() == orderSize) {
            seaFoodService.noticeClient(orderId);
        }
    }


    @Override
    public Order getSeaFoodOrder(String orderId) {
        return null;
    }

    @Override
    public boolean updateOrder(Order order, String passCode) {
        return false;
    }

    @Override
    public String generateCode(String itemId) {
        return null;
    }

    @Override
    public String getOrderInfo(String userId) {
        return null;
    }

    @Override
    public boolean noticeClient(String orderId) {
        return false;
    }

    @Override
    public boolean updateOrderStatus(String orderId, ShippingStatus status) {
        return false;
    }

    @Override
    public IotFoodFridge getBestFridgeLocation(String destinationAddress) {
        return null;
    }

    @Override
    public String getProducerInfo(String producerId) {
        return null;
    }
}
